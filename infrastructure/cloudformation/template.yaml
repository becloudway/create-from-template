AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  LogLevel:
    Type: String
    Default: info
  ApiStageName:
    Type: String
    Default: $default

Conditions:
  isDev: !Equals [ !Ref Environment, dev ]
  isProd: !Equals [ !Ref Environment, prod ]

Resources:
  Api:
    Type: 'AWS::Serverless::HttpApi'
    Properties:
      StageName: !Ref ApiStageName
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Force
          - Cache-Control
          - Pragma
          - x-apigateway-header
        AllowMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - OPTIONS
        AllowOrigins:
          - !If [isProd, "https://app.XXX", !Sub "https://app.${Environment}.XXX"]
          - !If [isDev, http://localhost:3000, !Ref AWS::NoValue]
        ExposeHeaders:
          - x-apigateway-header
          - x-amz-date
        AllowCredentials: true

  VersionLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      # Tracing: Active
      CodeUri: version-lambda
      MemorySize: 128
      Timeout: 5
      Events:
        GetVersion:
          Type: HttpApi
          Properties:
            Path: '/version'
            Method: GET
            ApiId: !Ref Api
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: !Ref LogLevel

  ExampleLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      # Tracing: Active
      CodeUri: example-lambda
      MemorySize: 128
      Timeout: 5
      Events:
        GetItem:
          Type: HttpApi
          Properties:
            Path: '/item/{id}'
            Method: GET
            ApiId: !Ref Api
        GetBadRequest:
          Type: HttpApi
          Properties:
            Path: '/error/badrequest'
            Method: GET
            ApiId: !Ref Api
        GetNotFound:
          Type: HttpApi
          Properties:
            Path: '/error/notfound'
            Method: GET
            ApiId: !Ref Api
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: !Ref LogLevel
          API_STAGENAME: !Ref ApiStageName

Outputs:
  APIDomainName:
    Description: API Domain name
    Value: !Sub ${Api}.execute-api.${AWS::Region}.amazonaws.com
